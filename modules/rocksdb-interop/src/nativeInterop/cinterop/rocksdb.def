package = org.rocksdb

headers = c.h

#staticLibraries = libbz2.a \
#                  liblz4.a \
#                  librocksdb.a \
#                  libsnappy.a \
#                  libzstd.a
#staticLibraries.osx = libz.a
#staticLibraries.linux = libz.a
#staticLibraries.mingw = libzlib.a

#linkerOpts = -lrocksdb \
#             -lbz2 \
#             -llz4 \
#             -lsnappy \
#             -lzstd
#linkerOpts.osx = -lz
#linkerOpts.linux = -lz
#linkerOpts.mingw = -lzlib -lshlwapi -lrpcrt4

##compilerOpts =
#compilerOpts.osx =   -lrocksdb \
#                     -lz \
#                     -lbz2 \
#                     -llz4 \
#                     -lsnappy \
#                     -lzstd

#compilerOpts.linux = -lrocksdb \
#                     -lz \
#                     -lbz2 \
#                     -llz4 \
#                     -lsnappy \
#                     -lzstd

#compilerOpts.mingw = -lrocksdb \
#                     -lzlib \
#                     -lbz2 \
#                     -llz4 \
#                     -lsnappy \
#                     -lzstd \
#                     -lshlwapi \
#                     -lrpcrt4


strictEnums = AccessHint

# Don't generate cinterop for the default access_hint functions,
# because they don't use the custom AccessHint enum (defined below)
excludedFunctions = \
 rocksdb_options_set_access_hint_on_compaction_start \
 rocksdb_options_get_access_hint_on_compaction_start


#language=c
---

// c.h uses an int to represent AccessHint - so manually define an enum

typedef enum {
  NONE = 0,
  NORMAL = 1,
  SEQUENTIAL = 2,
  WILL_NEED = 3
} AccessHint;

static AccessHint rocksdb_options_get_access_hint_on_compaction_start__(
  rocksdb_options_t* opt
) {
  return rocksdb_options_get_access_hint_on_compaction_start(opt);
};

static void rocksdb_options_set_access_hint_on_compaction_start__(
  rocksdb_options_t* opt,
  AccessHint access_hint
) {
  rocksdb_options_set_access_hint_on_compaction_start(opt, access_hint);
};
